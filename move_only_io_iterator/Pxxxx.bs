<pre class='metadata'>
Title: Support for move-only single-pass iterators.
Shortname: Dxxxx
Level: 0
Status: D
Group: wg21
Editor: Corentin Jabot, corentin.jabot@gmail.com
URL: https://cor3ntin.github.io/CPPProposals/deprecate_comma_subscript/P0000.html
Abstract: We propose a new iterator taxonomy to allow for move only, single pass iterators
Audience: EWG
Markup Shorthands: markdown yes
Default Highlight: CPP
Line Numbers: no
Date: 2018-08-20
</pre>

# Introduction {#intro}

I want to move(it), move(it), y'all want to move(it);

Non-forward Input iterators and output iterators, also known as "Single pass iterators" are semantically move-only.
The standard state:
> Note: For input iterators, a == b does not imply ++a == ++b. (Equality does not guarantee the substitution property or referential transparency.) Algorithms on input iterators should never attempt to pass through the same iterator twice. They should be single pass algorithms.

This means that once an iterator is copied, only one of the copy can meaningfully be used.
Deferencing multiple copies of a single pass iterator often exposes undefined or invalid behavior.


It would therefore make sense that class satisfying the InputIterator concept be move only.
Alas, Single pass iterators and many classes satisfying its requierements predate C++11, they do therefore have move only semantic with copy syntax.
In that regard, they are similar  to `auto_ptr`.

In this paper, we propose a way to introduce the notion of move-only single pass iterators.

# Scope

This paper proposes changes to the Range TS and P0896 both targeting C++20. Because the changes proposed here changes some requierements and concepts as presented
by P0896, the authors stongly suggest they are considered for the inclusion in the same version of the standard.
Indeed, P0896 give us a unique opportunity to make the change proposed.

## Non Goal

As a large amount of code depend on the Input/Output iterators requierements as specified by C++17, this paper do not propose any modifications to the the `Cpp17InputIterator` or
any class that depend on it.
Specifically, we do not propose to change the requierements or wording of `istream_iterator`, `ostream_iterator`, `istreambuf_iterator` or `ostreambuf_iterator`.


# The problem


# Proposed solution

## Modifications to the range TS

### `WeaklyIncrementable`

`WeaklyIncrementable` is a requierements of all `Iterator`, including `InputIterator`. `WeaklyIncrementable` is defined to be regular











