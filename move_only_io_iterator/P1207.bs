<pre class='metadata'>
Title: Movability of Single-pass iterators
Shortname: D1207
Level: 0
Status: D
Group: wg21
Editor: Corentin Jabot, corentin.jabot@gmail.com
URL:
Abstract: ....
Audience: LEWG
Markup Shorthands: markdown yes
Default Highlight: CPP
Line Numbers: no
Date: 2018-08-20
</pre>

<div style="text-align:right"><em>I want to move(it), move(it), y'all want to move(it); </em></div>


# Introduction

Non-forward Input iterators and output iterators, also known as "Single-pass iterators" are semantically move-only.
The standard states:

Note: For input iterators, a == b does not imply ++a == ++b (Equality does not guarantee the substitution property or referential transparency.)
Algorithms on input iterators should never attempt to pass through the same iterator twice. They should be single pass algorithms.

This means that once an iterator is copied, only one of the copies can meaningfully be used.
Deferencing multiple copies of a single pass iterator often exposes undefined or invalid behavior.


It would, therefore, make sense that classes satisfying the `InputIterator` shall only be required to be movable.

Alas, Single-pass iterators and many classes satisfying its requirements predate C++11, they do therefore have move only semantic with copy syntax.
In that regard, they are similar to `auto_ptr`.

# Terminology

This paper redefines the requirements of some concepts proposed by the Ranges TS (and the deep merge proposal).
In the rest of this paper

 * `InputIterator` designs the `InputIterator` concept as proposed by this paper
 * `RangesTSInputIterator` designs the `InputIterator` concept as proposed by the Ranges TS
 * `Cpp17InputIterator` design the **requirements** of input iterators compatible with the STL as specified by the C++17 standard

 * `OutputIterator` designs the `OutputIterator` concept as proposed by this paper
 * `RangesTSOutputIterator` designs the `OutputIterator` concept as proposed by the Ranges TS
 * `Cpp17OutputIterator` design the **requirements** of output iterators compatible with the STL as specified by the C++17 standard

 * input/outputs iterators refer to single pass(non/forward) iterators.

# Scope

This paper proposes changes to the Ranges TS and [[P0896R2]] both targeting C++20. Because the modifications proposed here changes some requirements and concepts as presented
by [[P0896R2]], the authors strongly suggest they are considered for the inclusion in the same version of the standard.
Indeed, [[P0896R2]] gives us a unique opportunity to make the modifications proposed, as they might, in some cases, break code, if introduced after the publication
of C++20 (with ranges).

## Non-Goal

As a large amount of code depends on the Input/Output iterators requirements as specified by C++17, this paper does not propose any modifications to the `Cpp17InputIterator` or
any class that depends on it.
Specifically, we do not propose to change the requirements or wording of `istream_iterator`, `ostream_iterator`, `istreambuf_iterator` or `ostreambuf_iterator`.
Furthermore, we do not propose modifications to algorithms in the namespace `std`. The new iterators we propose here are in fact mostly incompatible with existing algorithms.
They are meant to be used in the `ranges` namespace and as basic building blocks of range-based views.

While the ability to use move-only iterators with the algorithms defined in the `std` namespace would certainly be welcomed, doing so would weaken the `RangesTSInputIterator` concept and leads to other issues (namely, `std` based algorithms require iterators to be `EqualityComparable`, which the `RangesTSInputIterator` is not).

In practice, that means that types satisfying the `Cpp17InputIterator` requirements continue to work unaffected with algorithms defined in the `std` namespace. They may not be compatible with algorithms defined in the ranges namespace, or with new code using the `InputIterator` concept as proposed here.

Inversely, types satisfying the `InputIterator` concepts may not be compatible with algorithms in `std` as they may not be able to satisfy the `Cpp17InputIterator` requirements.

Because it makes never sense to copy an Input Iterator (more on that later), it would be possible to add support for move-only iterators to the  `std` namespace without much change to the standard.
However, because implementers may copy iterators within the implementation of the standard library, along with existing third-party libraries, a lot of code would need to be adapted.
And there is little pressure to do so as existing iterators types cannot be changed.

# Motivation

## Move-only state

It may be desirable for an iterator to hold a move-only object, becoming itself move-only, which is not possible with iterators modeling Cpp17Iterator.
A real-world example of such iterator is described in [[P0902R0]].
While syntactically copyable in the current design, a `coroutine_handle` such as used by a `generator` input iterator ought to be move-only.

## Implicitly destructive operations

Reading from an input sequence is a destructive operation. But that destruction is reflected nowhere in the API.
Less experienced developers may not be aware of the destructive / single-pass nature of non-forward Iterators
By making `InputIterator` move only, developers will have to explicitly move them, which both signals the invalidation
of the move-from object, but, more importantly, that the underlying data will be destroyed.

## Performance optimization

Move-only iterators are a performance improvement opportunity.
For example, in the presence of `InputIterator`s, `ranges::copy` could perform a move rather than a copy of the elements since iteration is destructive.
This is explored further down


# What is a move-only iterator?

Unlike [[P0902R0]], we do not propose to introduce a new iterator category.
A movable Iterator is a non-forward iterator (either input or output depending on whether is it writable).
This means that a move-only iterator as _almost_ the same semantic requirements as an InputIterator,
and offers the same operations.
That means that everything that can be expressed and done with an input iterator can be done equally expressed
and done with a movable iterator.

This paper does, therefore,  not propose to introduce a new iterator category.
We do not propose a new name requirement, concept name or iterator tag.

Furthermore, there is no ForwardIterator that is only movable, as a ForwardIterator is by definition
an iterator that can be copied. More on that further down.





# List of proposed changes

Because the ranges-related proposals are still in flux and will require merging multiple documents, we do not provide wording
at this time.
However, a number of concepts need to be modified in order to allow for iterators that are only movable.
This is a departure from the Ranges TS - which itself is grounded in Stepanov work - in which all iterator categories are Regular - or Semi-Regular,
which implies copyability.

Note that "ForwardIterator" is defined in terms of its copyability, and so it shall remain regular.
The Copyability, and therefore Regularity of Iterator is therefore moved a few level down from `ranges::Iterator` to `ranges::ForwardIterator`

## Changes to &lt;iterator>

### WeaklyIncrementable

`WeaklyIncrementable` is a requirement of all `Iterator`, including `RangesTSInputIterator`. `WeaklyIncrementable` is defined to be semi-regular.
Because WeaklyIncrementable, as it is described in [[P0896R2]], accommodates for `RangesTSInputIterator` and `Cpp17InputIterator`, it suffers from the same issue (being copyable with move semantic).
We propose to strike the `Semiregular` requirement as follow

<xmp>
template <class I>
concept WeaklyIncrementable =
    Movable<I> &&
    requires(I& i) {
        typename iter_difference_t<I>;
        { ++i } -> Same<I&>&&;
        i++;
    };
</xmp>

### Iterator

Iterator is left unmodified as merely changing WeaklyIncrementable is enough to not
requiring it to be regular.

### InputIterator

Modify the `InputIterator` concept as follow.

<xmp>
template <class I>
concept InputIterator =
    Readable<I> &&
    Iterator<I>;
</xmp>


### ForwardIterator

<xmp>
template <class I>
concept ForwardIterator =
    InputIterator &&
    EqualityComparable<I> &&
    Incrementable<I> &&
    DerivedFrom<iterator_category_t<I>, forward_iterator_tag> &&
    Sentinel<I, I>;
</xmp>

ForwardIterator is made `Regular` through `Incrementable`.
Concepts refining `ForwardIterator` are left unchanged.


### OutputIterator

<xmp>
template <class I, class T>
concept OutputIterator =
    Iterator<I> &&
    Writable<I, T>
    requires(I& i, T&& t) {
        *i++ = std::forward<T>(t);
    };
</xmp>


## Changes to &lt;ranges>

### Views
 * The SemiRegular requirement is removed from view over a non-semi-regular ranges


### Inserters

Because the `OutputIterator` concept as proposed here is not compatible with the `Cpp17OutputIterator` requirements, it would not be possible to
use `std::` inserters with the `ranges::` algorithms.

It is, therefore, necessary to provide suitable inserters modeling `OutputIterator`

#### back_insert_iterator

<xmp>
namespace std::ranges {
template <class Container>
class back_insert_iterator : public std::back_insert_iterator<Container> {
public:
    using std::back_insert_iterator<Container>::back_insert_iterator;
    back_insert_iterator(const back_insert_iterator & other) = delete;
    back_insert_iterator(back_insert_iterator && other)

};
template <class Container>
back_insert_iterator<Container> back_inserter(Container& x);
}
</xmp>

#### front_insert_iterator

<xmp>
namespace std::ranges {
template <class Container>
class front_insert_iterator : public std::front_insert_iterator<Container> {
public:
    using std::front_insert_iterator<Container>::front_insert_iterator;
    front_insert_iterator(const front_insert_iterator & other) = delete;
    front_insert_iterator(front_insert_iterator && other);
};
template <class Container>
front_insert_iterator<Container> front_inserter(Container& x);
}
</xmp>

#### insert_iterator

<xmp>
namespace std::ranges {
template <class Container>
class insert_iterator : public std::insert_iterator<Container> {
public:
    using std::insert_iterator<Container>::insert_iterator;
    insert_iterator(const insert_iterator & other) = delete;
    insert_iterator(insert_iterator && other);
};
template <class Container>
insert_iterator<Container> inserter(Container& x, typename Container::iterator i);
}
</xmp>


## Changes to &lt;algorithms>

Should algorithms not satisfy `InputIterator` (because they depend on copy-constructability) - they would need to be modified to
accept a `ForwardIterator` instead.
Beyond that, there would be very little, if any, wording change requires to ranges' algorithms.
However, implementers would have to never copy non-forward iterators within the implementation.


# Impact on other proposals

## istream_view

A better alternative to istream_iterator is offered by [[P1035R0]]'s `istream_view`.
While implementation-defined, `istream_view`'s iterators would need to model `InputRange` and therefore make use of `InputIterator` as proposed here.

Given that it does not need to own an Iterator but only a handle to the underlying device, `istream_view` can be semi-regular.



# A Holistic Approach to Iterators.

While the first part of this paper focuses on making move-only iterators possible, as a mean to get some code to compile,
it is important to take a step back and to think about what movability means for Iterators, from first principles.

An iterator denotes a position into a sequence of elements (whether that sequence maps to memory or not is, for our purpose, irrelevant).

A most basic iterator can be incremented, which means it can move to the next position in the sequence.
An iterator does not own the sequence iterated over (there are exceptions, ie: generators), which means the
salient property of an iterator is its position in that sequence.

In fact, in Elements of programming, an iterator is exactly defined by its distance to the start of the
sequence.

Iterators categories then represent the way an iterator can move along that sequence.
 * Input and FordwardIterator: sequentially, one direction
 * BidirectionalIterator: sequentially, both directions
 * RandomAccess: both directions in O(1)

ContiguousIterator is an optimization of RandomAccessIterator specific to the C++ memory model that
further, constrain the underlying sequence to be laid out contiguously in memory.

Stepanov theorized an additional category, "Index iterator", which was O(1) access
but in a single direction.

Further Work was made on iterator categories, notably the Boost.Iterator library
focused on separating traversal (how the iterator moves along the sequence), from
access(whether dereferencing an iterator allows the pointed element to be read, written or both).
While a very interesting concept, it falls outside the scope of this paper;
Just keep in mind that everything that applies to non-forward InputIterator usually
applies to OutputIterator - Which are always non-Forward, the standard lacking that symmetry between
read access and write access.

However, focusing on traversal, the set of iterators categories is actually
rather closed, there are only so many ways a sequence can be traversed. An
important point of Stepanov design is that each category is a refinement of the precedent.
a RandomAccessIterator is a BidirectionalIterator which in turn is a ForwardIterator.
so each algorithm applicable to a ForwardIterator can be equally applied to a BidirectionalIterator, etc.

So, what separates InputIterator for ForwardIterator, if they are both "forward" in that they can
both traverse a sequence in one direction.

ForwardIterator is defined as being "multi-pass". Meaning it can traverse a sequence multiple times.
That, in turn, implies ForwardIterator is copyable, because if a sequence can be traversed multiple times,
it can also be traversed multiple times at the same times and therefore there can be multiple ForwardIterator
pointing at different elements in the sequence.
ForwardIterator is also always `EquallyComparable`.
2 ForwardIterator compares equal if they point to the same elements in the sequence.
Remember the position of an iterator in a sequence is the salient property of an iterator.
And so, ForwardIterator, being both EquallyComparable and Copyable is Regular.

The standard defines the "multi pass" ganrantee by saying:
> a == b implies ++a == ++b
> Given X is a pointer type or the expression (void)++X(a), *a is equivalent to the expression *a.

In other words:
Two identical objects to which is applied the same transformation are identical.
Copying a FordwardIterator copy the salient properties of that value and incrementing it does
not modify the underlying sequence.
So `ForwardIterator` is required to be a regular type behaving like a regular type.

Which bring us to InputIterator.
InputIterator is a "single pass" iterator". The underlying sequence can on only be traversed once.
The existence of an Iterator at the nth position in the sequence implies there can be no valid iterator at the position n-1 in that same sequence.

Given an InputIterator a
b = a;
a++;
b; // is invalid.

However, remember that the sole salient property of an iterator is its distance to the start of the sequence.
Incrementing an iterator only mutates that property (again, conceptually, independently of implementation).
And the only operation that mutates that property is the increment operation (which Stepanov calls `successor`).

This implies that, as a non-forward iterator moves from one element of the sequence to the next,
that element is destroyed.
The sequences traversed by an InputIterator is best thought of as a stack and incrementing an iterator pops
the head.
All of this is well known and is basically rephrasing "Input iterators are single pass".

An important point to make is that how an iterator can traverse a sequence is derived from the nature of the sequence
rather than from the iterator itself.
The point could be made that there is no such thing as an "Input iterator" Or a "Forward Iterator" because what we really
means is "Iterator over an Input Sequence" or "Iterator over a Forward Sequence".

That is saying that, to be able to reason properly about iterators and traversal,
we must assume that the iterator type associated with a sequence is the most specialized possible for that sequence.

The problem is, of course, that we do not have, in the general case, a more meaningful way to express the traversability
of a sequence than by defining what type of iterator is used to iterate over it.

It is then the responsibility of the developer providing the sequence to define the most appropriate - specialized -
iterator for that sequence.

In practice, because InputIterator and ForwardIterator are syntactically identical, and because the
single-pass / multi-passes guarantees are poorly taught, it is not uncommon for iterators to be miss-categorized.
Other iterator categories do not have these problems as each subsequent refining category adds syntax requirements:
BidirectionalIiterator require decrement operators, RandomAccessIterator further requires more methods, etc.
And while ContiguousIterator is currently not syntactically differentiated from RandomAccessIterator,
It would be possible to require that ContiguousIterator be convertible to a pointer of the type of the underlying sequence's
elements.

But then, is there a set of operations and semantic requirements, translating to actual C++ syntax, that could allow for
InputIterator to be easily distinguish from each other?
Can we then, not require a tag system?
Is there a defining operation that distinguishes InputIterator from ForwardIterator, in such a way that it would both not require
an explicit category tagging, while at the same time offering a better understanding of iterator categories as well as a less suprising,
safer api for input iterator?

In fact there is. We established that ForwardIterator are semantically copyable, while InputIterator are not.
So the requirement that promotes an InputIterator into a ForwardIterator is indeed copyability - which translate in C++ to a copy constructor.
We can therefore consider that, in the absence of a tag, all non-copyable iterator are InputIterator,
while all copyable iterators are ForwardIterator.

This model however, deviates slightly from Stepanov's work and `Cpp17InputIterator`:
Copying a `Cpp17InputIterator` do not invalidate either copy.
In fact it is quite valid to deference multiple copies of a `Cpp17InputIterator`.

Elements Of Programming has the notion of `Regular` types (and in Stepanov work, all Iterators are regular), but also the notion of regular transformations
(aka pure functions) - which given the same input, always give the same output.
So given a ForwardIterator `fi`, there is a `successor` function returning an incremented copy of `fi`
such as `sucessor(fi) == sucessor(fi)`.
In C++, that regular `sucessor` function is `ForwardIterator::operator++(int);`, in that `(it++) == (it++)` for any given `ForwardIterator`.

For `InputIterator`, Stepanov specifies that the `sucessor` is pseudo transformation, or a non-regular transformation that look like a regular one.
And Therein lies the rub.

Like a pointer, `InputIterator` is Regular, up until the point a transformation of an instance affects all copies.
<xmp>
InputIterator i = /*...*/
*i    //ok
a = i //ok
*i    //ok
i++;  // a now invalid
</xmp>

This design models accurately the nature of iterators. Because an iterator represents a position in a sequence, it is natural that multiple iterators could point
to the same position.
After one copy is incremented, in Stepanov's model, other copies are in a partiallty formed state, and cannot be used (but they can be assigned to - or destroyed).

Let's consider the case where we move from an iterator instead of copying it
<xmp>
InputIterator i = /*...*/
*i           //ok
a = move(i); //ok
*i;          //invalid
a++;         //ok
i++;         //invalid
</xmp>

Moving from an iterator invalids it early, albeit artificially. As per standard, the moved-from iterator is in a valid, but unspecified state,
and cannot be used (but can be assigned to - or destroyed).
Notice the similarity between "a valid, but unspecified state" and "a partiallty formed state".

The difference is slim. Notably, both models are equally expresive. References can be use, should multiple names be necessary.
And in Stepanov's model, iterators are made invalid by the natural mutation of the sequence upon increment, rather than by artificially
preventing multiple copies.

The second model in which the iterator is moved from, the one we think should be the default way to handle non-forward iterators,
is, however a much better fit for the C++ model, and offer much stronger guarantees to both the human developer as well as static analysis tools.

In the "increment invalids" model, objects are spiritually moved-from at a distance, which neither the theory
of special relativity nor the C++ memory model are equiped to handle.
This makes it hard for tools to detect invalid uses - although it might become possible with better tools (See Herb Sutter's CppCon2018 talk).
But most concerning, there is no way for a developer to know that the iterators are entangled.

<xmp>
auto i = troubles.begin();
auto schrodingers_iterator = i;
i++;
auto nasal_demon = *schrodingers_iterator;
</xmp>

The code code above might be perfectly fine.
Indeed whether it is well defined or not depends on whether the iterator return by `troubles.begin();` is forward or not.
It is undecidable in these 4 lines of slide-code.
It is, not much more obvious in a complex programm that may pass iterators to other functions or store them in containers, etc.
There are, after all, no theorical limits to the distance in time and space over which entanglement perdures.

Worse even, should the type of `troubles.begin();` be changed from Forward to Input, the code would change from perfectly fine to
UB, with no warning.

Moving input iterators therefore better express intent, less suprising and safer.
Move-only input Iterators also express the destructive nature of incrementation and give a better sense of the difference between InputIterator
and `ForwarIterator`.

## An Holistic Approach to Iterator Tags and Iterator Concepts

Missing the notion of movability pre-c++11 and lacking concepts, `Cpp17Iterator` are syntactically distinguished by tags.
a `Cpp17InputIterator` is one which has an `input_iterator_tag` tag, while a `Cpp17ForwardIterator` is one which has a `forward_iterator_tag` tag.
This creates a sort of circular, self-referential definition.
This has carried over to the RangesTS's `Iterator` concepts definitions.
Iterators concepts then
 * Have semantic requirements not expressed through syntax and therefore not enforcable at compile time
 * Need syntax to artificially subscribe to the correct, most refined concept

Of course, it is not always possible to express all of a type sementic requirements through syntax, and in some cases tags are an unfortunate necessity.
But they should be a last recourse mechanism, and whenever possible the semantic requirements should reflect in the syntax.
The idea is that hidden requirements not expressed as code lead to easier-to-misuse types, which inevitably translates to runtime bugs.

In the case of iterators, all the requirements of all iterators categories can be expressed syntactically:

<xmp>
template <class I> concept bool InputIterator =
	Readable<I> &&
	Iterator<I> ;

template <class I> concept bool ForwardIterator =
	InputIterator<I> &&
	Copyable<I> &&
	EqualityComparable<I>;

template <class I> concept bool BidirectionalIterator =
	ForwardIterator<I> &&
	Decrementable<I>;

template <class I> concept bool RandomAccessIterator =
	BidirectionalIterator<I> &&
	RandomAccessIncrementable<I>;

template <class I> concept bool ContiguousIterator =
	BidirectionalIterator<I> &&
	Convertible<I, iter_reference_t<I>>;
</xmp>

This is of course simplified, but shows that each iterator category subsumes the last and adds a single, cohesive set of requirement enforcable at compile-time.
In this design there is no risk of a type satisfying the wrong concept because of a poorly chosen tag.

### Tags as an opt-in opt-out mechanism

Because of a desire to be compatible with the legacy `std` algorithm and the amount of code depending on iterators as they have
been defined since the inception of the STL, we propose that tags be **optionally* definable on `Iterators` types.

Notably, we propose that a type that otherwise meets the requirements of `FordwardIterator`, but does define an `input_iterator_tag`,
should not satisfy `ForwardIterator`.
This can be achieved by defined `ForwardIterator` as follow:

<xmp>
template <class I> concept bool ForwardIterator =
	InputIterator<I> &&
	Copyable<I> &&
	EqualityComparable<I> &&
	has_no_iterator_category<I> || DerivedFrom<iterator_category_t<I>, forward_iterator_tag>;
</xmp>

# Q/A

## Non-regular iterators, really?

This proposal advocates for Non-Regular Iterators, and weakens `WeaklyIncrementable` requirements to that effect.
Non-Regularity is best avoided, so this might feel like going backward.

However, non-regular types are easier to reason about than types that just pretend to be regular.
Because InputIterator is meant to iterate over a non-regular sequence, it is not regular (whether we like it or not), and the best we can do is
make sure the syntax matches the semantic.
This paper is in part motivated by the conviction than exposing a false sense of (Semi-)regularity is much more detrimental to code robustness
than non-regularity.

## What about [[P0902R0]] ?

Andrew Hunter's "Move-only iterators" paper proposes a design to introduce Move-Only iterators in the taxonomy of `Cpp17Iterator`.
However, this design does not offer a solution to use these move-only iterators with existing algorithms, limiting their usefulness.
The iterators proposed by P0902 are additionally `EqualityComparable`. The advantage of that is that they are compatible with algorithms
designed with C++17 downward. That's, however, a potential source of bug and confusion.

However, if LEWG felt strongly about a solution compatible with existing algorithms it would be possible
to relax the requirements of concerned algorithms to accept move-only iterators. along with the introduction of a new `move_iterator_tag` trait.

Such algorithms would then be compatible with types satisfying `InputIterator` (as proposed by this paper) through a `common_iterator` adaptor.

If proven with enough confidence that requirements of existing algorithms in the `std` namespace can be relaxed to handle move-only iterator, the necessary
modifications can be applied in a subsequent standard version (by opposition to this proposal).

So while there would definitively be value in supporting move-only iterators everywhere it makes sense, and the potential for breakage is relatively low,
we do not propose it for lack of visibility on the consequences of such changes


# Questions for LEWG
 * Does LEWG want to support non-copyable iterators in the `ranges` namespace?
 * Does LEWG agree that **non-copyable** iterators are always input or output iterators and do not constitute a new category (ie: no new tag should be introduced)?
 * Does LEWG agree that, in the absence of an explicit tag, a **non-copyable** iterator that otherwise meets the requirement of `InputIterator`/`OutputIterator` should be recognized as such?
 * Does LEWG agree that, in the absence of an explicit tag, a **copyable** iterator that otherwise meets the requirement of `ForwardIterator` should be recognized as such?
 * Does LEWG want to recommend that future non-forward iterators considered for inclusion in the standard should not be copyable?
 * Does LEWG think non-forward views should return `begin()` by reference?
 * Does LEWG agree that `ranges::copy` can and should move from non-copyable input views?
 * Does LEWG want to revisit the default constructability of iterators given `Regular` is no longer a requirement of `Iterator`?
 * Does LEWG want to recognize `RandomAccessIterator` providing a conversion operator to the `pointer` type of the underlying sequence as `ContiguousIterator` without the need for an explicit tag?
 * Generally, does LEWG support the idea of a tag-less categorization of iterators in the ranges namespace, with tags still supported as an opt-in/opt-out mechanism.




## Iterator facade

[[P0186R0]] describes a system for an iterator facade.

We propose that
 * An iterator constructed from a move-only cursor, without an `equal(const cursor &)` method models an `InputIterator`
    (or `OutputIterator` depending on whether a `write` method is defined)
 * An iterator facade constructed from a Copyable cursor with an `equal(const cursor &)` method models an `ForwardIterator`
 * Unless it defines a `single_pass = true` trait in which case it should models `Cpp17InputIterator`.
 * An iterator facade cannot be constructed from a cursor that either defines `equal` or models Copyable but not both.
