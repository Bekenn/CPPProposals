<pre class='metadata'>
Title: Adopt source_location from Library Fundamentals V3 for C++20
Shortname: D1208
Level: 3
Status: D
Group: wg21
Editor: Corentin Jabot, corentin.jabot@gmail.com
Editor: Robert Douglas, rwdougla@gmail.com
Abstract: This paper proposes that `source_location` (from Library Fundamentals V3) be adopted into the C++20 standard
Audience: LEWG, LWG
URL: https://rawgit.com/cor3ntin/CPPProposals/master/merge_source_location/P1208.html
Markup Shorthands: markdown yes
Line Numbers: no
Date: 2019-02-22
.tony-table table {
    width:100%;
}

.tony-table th {
    text-align: center;
    padding-right:20px;
}

.tony-table  td {
    vertical-align:top;
}

</pre>

<style>

pre * {
	all:initial ! important
}

.wording-add {
    background-color: #F6F9ED;
}


/* Table */
.data-table {
    border-collapse: collapse;
    font-size: 14px;
    min-width: 573px;
}
.data-table th {
    color: #5a5a5a;
}

.data-table th,
.data-table td {
    padding: 7px 17px;
}
.data-table caption {
    margin: 7px;
}

/* Table Header */
.data-table thead th {
    border-bottom: 2px solid #CCCCCC;
}

/* Table Body */
.data-table tbody td {
    color: #353535;
    border-bottom: 1px solid #dcdcdc;
    text-align: right;
}

.data-table tbody tr:last-child td {
    border: 0;
}

.data-table tbody tr:hover td {
    background-color: #f7f7f7;
    transition: all .2s;
}

/* Table Footer */
.data-table tfoot th {
    border-top: 1px solid #c7c7c7;
    text-align: right;
}

.array_row {
    outline: thin solid #008000
}

header {
	font-weight:bold
}

</style>

# Changes
## R2
	* Specify that the string returned by function_name is a NTMBS encoded using the execution character set
## R1
	* Make current consteval
	* Explain why source_location cannot be constructed from user specified values

# Proposal

This paper proposes that source_location from Library Fundamentals V3 [[N4758]] be adopted into the C++20 standard.

`source_location` has been successfully implemented without difficulties in GCC, and Clang implementers almost completed their implementation of it.
As described by the original paper, it's a necessary feature to implement logging without requiring macros, one that cannot be portably implemented
by non-standard libraries because it requires compiler support.

`source_location` has been very favorably received by both EWG and LEWG [[n4129]], [[n4417]] and has been part of library
fundamentals v2 [[n4562]] and v3 [[N4758]] since 2015 without changes to exposed interface.

Note: A proposal [[P0555R0]] in 2017 to make use of `string_view` in `source_location` has been withdrawn by their authors once `string_view`
gained a constexpr constructor, allowing the use of `source_location` in constexpr contexts.

# A few design changes

During an early review of this papers, some interest in a few design changes arose:

## Enforcing a size for `source_location` objects ?

<b> No consensus in San Diego </b>

`source_location` as currently implemented by Clang and GCC is a structure encapsulating all its members (file, function, line, column),
and so its size is roughly `3 * sizeof(void*)`.

A note states:
> [ Note: The intent of source_location is to have a small size and efficient copying. — end note ]

However, there seems to be some interest for having `source_location` be guaranteed `sizeof(void*)`.
Notably, reviewers wonder if `source_location` should be embedded in a yet to be proposed `std::error`.
Herb Sutter and Niall Douglas pointed out that `std::error` is meant to handle recoverable errors,
rather than to communicate an error to developers (see Herb Sutter's talk on error handling CppCon 2018).
And while we agree strongly with this sentiment, it's worth noting that a subset of the C committee
is interested in having source information in whatever deterministic exception handling they are working towards;

While, as pointed out by Niall, it's unlikely the two languages will have directly interoperable mechanisms,
having a guaranteed size for `source_location` might make such interoperability easier should a need for it arise.

Barring that, `source_location` is an error reporting tool targeted at human developers,
and the cost of any such error reporting system is many orders of magnitude larger than copying
3 pointers around. We do not think there is a strong incentive to guarantee the size of that type
or restricting the way it is implemented.


For completeness, such modification could be achieved by adding one level of indirection:

<pre>
struct __source_location_data {
  /* implementation defined */
};
struct source_location {
private:
    const __source_location_data* __data;
};
</pre>

Alternatively, source_location could return a const reference:

<pre>
struct source_location {
    constexpr const source_location & current() noexcept;
};
</pre>

The authors strongly prefer the first solution as we think retaining value semantics is important.
It is also important to note that, while not implemented, the first solution has been considered and is deemed
realistically implementable by both GCC and Clang developers (Jonathan Wakely, Eric Fiselier).

## Removing `current()` altogether ?

<b> No consensus in San Diego </b>


If LEWG elects to keep value semantics, the authors would like to propose that the `current` function is removed,
since, in its current form, `source_location` has a default constructor that has no meaningful use.
Besides being harder to misuse, using the constructor of the type to acquire its value is also significantly less verbose.

<pre>
    void log(auto && message, std::source_location sc = std::source_location::current());
    //or
    void log(auto && message, std::source_location sc = {});
</pre>

# User-constructed source_location
In San Diego, it was suggested to add the following constructor

```cpp
consteval source_location(uint_least32_t line,
				uint_least32_t column,
				const char* filename,
				const char* function);
```
So that source_location can be constructed by users and other libraries (stacktrace ?)
However, `consteval`, to the best of our understanding doesn't not guarantee that `filename` and `function` will
live past the call to that constructor.

`filename` and `function` would have to be copied (at compile time)
and it isn't clear wether it would be possible  to copy them in read only memory.

Therefore we suggested that this could be the subject of a separate paper to explore these lifetime issues


# Proposed Wording

The following wording correspond to the wording as in [n4758] (Library fundamental), with the exception of
making source_location::current() an immediate function as decided by LEWG in San Diego.

Notes To The Editor:
<ul>
The &lt;source_location> header in Library fundamental is part of a "Reflection" library that does not yet exist and may need to be created
or be placed elsewhere.
</ul>
<ul>
The &lt;source_location> header should be added to the list of freestanding headers
</ul>



<wording>

<section>
      <header>11.1 Header &lt;source_location> synopsis [reflection.src_loc.syn]</header>
<xmp>
namespace std {
  struct source_location {

    static consteval source_location current() noexcept;

    constexpr source_location() noexcept;

    constexpr int_least32_t line() const noexcept;
    constexpr int_least32_t column() const noexcept;
    constexpr const char* file_name() const noexcept;
    constexpr const char* function_name() const noexcept;
  };
} // namespace std</xmp>

    <p id="reflection.src_loc.1" para_num="1">
    
    Copies of a <code>source_location</code> object represent the same value.
    
      <cxx-note><span class="nowrap">[ <em>Note:</em></span>
    The intent of <code>source_location</code> is to have a small size and efficient copying.
    <span class="nowrap">— <em>end note</em> ]</span>
  </cxx-note>
    </p>

    <cxx-section id="reflection.src_loc.creation">


    <section>
    <header>11.2.1 source_location creation [reflection.src_loc.creation] </header>


      <cxx-function id="reflection.src_loc.creation.1" para_num="1">

    <pre><code><cxx-signature>static consteval source_location current() noexcept;</cxx-signature></code></pre>

    <dl>



        <cxx-returns id="reflection.src_loc.creation.2" para_num="2">

    <dt>Returns:</dt><dd>
          When invoked by a function call (<cxx-ref in="cxx" to="expr.call">C++17 <span title="expr.call">§8.2.2</span></cxx-ref>)
          whose <cxx-grammarterm><i>postfix-expression</i></cxx-grammarterm> is
          a (possibly parenthesized) <cxx-grammarterm><i>id-expression</i></cxx-grammarterm> naming <code>current</code>,
          returns a <code>source_location</code> with an implementation-defined value.
          The value should be affected by <code>#line</code>
          (<cxx-ref in="cxx" to="cpp.line">C++17 <span title="cpp.line">§19.4</span></cxx-ref>) in the same manner as for <code>__LINE__</code> and <code>__FILE__</code>.
          If invoked in some other way, the value returned is unspecified.
        </dd>
  </cxx-returns>
        <cxx-remarks id="reflection.src_loc.creation.3" para_num="3">

    <dt>Remarks:</dt><dd>
          When a <cxx-grammarterm><i>brace-or-equal-initializer</i></cxx-grammarterm> is used to initialize a non-static data member,
          any calls to <code>current</code> should correspond to the location of
          the constructor or aggregate initialization that initializes the member.
        </dd>
  </cxx-remarks>
        <p id="reflection.src_loc.creation.4" para_num="4">
          <cxx-note><span class="nowrap">[ <em>Note:</em></span>
    When used as a default argument (<cxx-ref in="cxx" to="dcl.fct.default">C++17 <span title="dcl.fct.default">§11.3.6</span></cxx-ref>),
            the value of the <code>source_location</code> will be the location of the call to <code>current</code> at the call site.
    <span class="nowrap">— <em>end note</em> ]</span>
  </cxx-note>
        </p>
        <cxx-example>

    <span class="nowrap">[ <em>Example:</em></span>

          <pre>struct s {
  source_location member = source_location::current();
  int other_member;
  s(source_location loc = source_location::current())
    : member(loc) // <i>values of</i> member <i>will be from call-site</i>
  {}
  s(int blather) : // <i>values of</i> member <i>should be hereabouts</i>
    other_member(blather) {}
  s(double) // <i>values of</i> member <i>should be hereabouts</i>
  {}
};

void f(source_location a = source_location::current()) {
  source_location b = source_location::current(); // <i>values in</i> b <i>represent this line</i>
}

void g() {
  f(); // f<i>’s first argument corresponds to this line of code</i>

  source_location c = source_location::current();
  f(c); // f<i>’s first argument gets the same values as </i>c<i>, above</i>
}</pre>

    <span class="nowrap">— <em>end example</em> ]</span>
  </cxx-example>

    </dl>
  </cxx-function>

      <cxx-function id="reflection.src_loc.creation.5" para_num="5">

    <pre><code><cxx-signature>constexpr source_location() noexcept;</cxx-signature></code></pre>

    <dl>



        <cxx-effects id="reflection.src_loc.creation.6" para_num="6">

    <dt>Effects:</dt><dd>Constructs an object of class <code>source_location</code>.</dd>
  </cxx-effects>
        <cxx-remarks id="reflection.src_loc.creation.7" para_num="7">

    <dt>Remarks:</dt><dd>The values are implementation-defined.</dd>
  </cxx-remarks>

    </dl>
  </cxx-function>

    </section>
  </cxx-section>

    <cxx-section id="reflection.src_loc.fields">


    <section>
      <header>11.2.2 source_location field access</header>



      <cxx-function id="reflection.src_loc.fields.1" para_num="1">

    <pre><code><cxx-signature>constexpr uint_least32_t line() const noexcept;</cxx-signature></code></pre>

    <dl>



        <cxx-returns id="reflection.src_loc.fields.2" para_num="2">

    <dt>Returns:</dt><dd>The presumed line number (<cxx-ref in="cxx" to="cpp.predefined">C++17 <span title="cpp.predefined">§19.8</span></cxx-ref>) represented by this object.</dd>
  </cxx-returns>

    </dl>
  </cxx-function>

      <cxx-function id="reflection.src_loc.fields.3" para_num="3">

    <pre><code><cxx-signature>constexpr uint_least32_t column() const noexcept;</cxx-signature></code></pre>

    <dl>



        <cxx-returns id="reflection.src_loc.fields.4" para_num="4">

    <dt>Returns:</dt><dd>
          An implementation-defined value representing
          some offset from the start of the line represented by this object.
        </dd>
  </cxx-returns>

    </dl>
  </cxx-function>

      <cxx-function id="reflection.src_loc.fields.5" para_num="5">

    <pre><code><cxx-signature>constexpr const char* file_name() const noexcept;</cxx-signature></code></pre>

    <dl>



        <cxx-returns id="reflection.src_loc.fields.6" para_num="6">

    <dt>Returns:</dt><dd>
          The presumed name of the current source file (<cxx-ref in="cxx" to="cpp.predefined">C++17 <span title="cpp.predefined">§19.8</span></cxx-ref>)
          represented by this object as an NTBS.
        </dd>
  </cxx-returns>

    </dl>
  </cxx-function>

      <cxx-function id="reflection.src_loc.fields.7" para_num="7">

    <pre><code><cxx-signature>constexpr const char* function_name() const noexcept;</cxx-signature></code></pre>

    <dl>



        <cxx-returns id="reflection.src_loc.fields.8" para_num="8">

    <dt>Returns:</dt><dd>
          If this object represents a position in the body of a function,
          returns an implementation-defined NTMBS that should correspond to the function name.
          The value of the NTMBS is first formed using the basic source character set (with universal-character-names as necessary) then mapped in the manner applied to string literals with no encoding prefix in phases 5 and 6 of translation.
          Otherwise, returns an empty string.
        </dd>
  </cxx-returns>

    </dl>
  </cxx-function>

    </section>
  </cxx-section>

    </section>
  </cxx-section>
</section>
</wording>

# Feature macro
Similarly to the original [[n4417]] wording, we recommend the feature test macro `__cpp_lib_source_location` for this feature.

# Acknowledgments

The authors would like to thanks the people who reviewed early version of this proposal, notably Peter Dimov, Jonathan Wakely Arthur O'Dwyer
and Geoffrey Romer.
We would also like to thank Herb Sutter and Niall Douglas for their insightful remarks on std::error and errors handling in general.
